/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ç–æ—á–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
 */
export default class CoordinateManager {
  constructor(viewerManager = null) {
    this.viewerManager = viewerManager;
    this.isDragging = false;
    this.draggedMarker = null;
    this.dragStartPosition = null;
    this.sphereRadius = 10; // –†–∞–¥–∏—É—Å —Å—Ñ–µ—Ä—ã –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    this.scene = null; // A-Frame —Å—Ü–µ–Ω–∞
    this.camera = null; // A-Frame –∫–∞–º–µ—Ä–∞
    this.raycaster = null; // THREE.js raycaster
    this.onPositionUpdateCallback = null; // Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å A-Frame —Å—Ü–µ–Ω–æ–π
   */
  initialize(scene) {
    this.scene = scene;
    this.camera = scene.querySelector('a-camera') || scene.querySelector('[camera]');

    if (!this.camera) {
      console.warn('‚ö†Ô∏è –ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å—Ü–µ–Ω–µ');
      return;
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º THREE.js raycaster –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ THREE
    if (typeof THREE !== 'undefined') {
      this.raycaster = new THREE.Raycaster();
      console.log('üìê CoordinateManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å THREE.js raycaster');
    } else {
      console.warn('‚ö†Ô∏è THREE.js –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–æ—á–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–Ω–∏–∂–µ–Ω–∞');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this.setupGlobalEventHandlers();

    console.log('‚úÖ CoordinateManager —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
   */
  setupGlobalEventHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è –∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –º—ã—à–∏
    document.addEventListener('mousemove', (e) => {
      this.onDrag(e);
    });

    document.addEventListener('mouseup', (e) => {
      this.endDrag(e);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    document.addEventListener('touchmove', (e) => {
      this.onDrag(e);
    });

    document.addEventListener('touchend', (e) => {
      this.endDrag(e);
    });

    console.log('üéÆ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç 3D –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∏–µ (–∫–∞–∫ –≤ PSV)
   */
  cartesianToSpherical(x, y, z) {
    const radius = Math.sqrt(x * x + y * y + z * z);
    const yaw = Math.atan2(x, z);
    const pitch = Math.asin(y / radius);

    return {
      yaw: yaw,
      pitch: pitch,
      radius: radius
    };
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ 3D
   */
  sphericalToCartesian(yaw, pitch, radius = this.sphereRadius) {
    const x = radius * Math.sin(yaw) * Math.cos(pitch);
    const y = radius * Math.sin(pitch);
    const z = radius * Math.cos(yaw) * Math.cos(pitch);

    return { x, y, z };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∫–ª–∏–∫–∞ –Ω–∞ —Å—Ñ–µ—Ä–µ –∏–∑ —Å–æ–±—ã—Ç–∏—è raycaster
   */
  getClickPositionOnSphere(event) {
    const detail = event.detail;
    if (!detail || !detail.intersection) {
      return null;
    }

    const intersection = detail.intersection;
    const point = intersection.point;

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–æ—á–∫—É –Ω–∞ —Å—Ñ–µ—Ä—É –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–¥–∏—É—Å–∞
    const normalized = this.normalizeToSphere(point.x, point.y, point.z);

    console.log('üéØ –ü–æ–∑–∏—Ü–∏—è –∫–ª–∏–∫–∞ –Ω–∞ —Å—Ñ–µ—Ä–µ:', normalized);
    return normalized;
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–æ—á–∫—É –Ω–∞ —Å—Ñ–µ—Ä—É –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–¥–∏—É—Å–∞
   */
  normalizeToSphere(x, y, z, radius = this.sphereRadius) {
    const currentRadius = Math.sqrt(x * x + y * y + z * z);
    if (currentRadius === 0) return { x: 0, y: 0, z: radius };

    const scale = radius / currentRadius;
    return {
      x: x * scale,
      y: y * scale,
      z: z * scale
    };
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞
   */
  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞ —Å callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
   */
  setupMarkerDragging(markerElement, hotspotId, onPositionUpdate = null) {
    console.log('üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞:', hotspotId);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
    if (onPositionUpdate) {
      markerElement._onPositionUpdate = onPositionUpdate;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º A-Frame —Å–æ–±—ã—Ç–∏—è –≤–º–µ—Å—Ç–æ DOM —Å–æ–±—ã—Ç–∏–π
    markerElement.addEventListener('mousedown', (event) => {
      // –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
      if (markerElement._mousedownInProgress) {
        console.log('üö´ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ mousedown –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–æ –¥–ª—è:', hotspotId);
        return;
      }
      markerElement._mousedownInProgress = true;
      setTimeout(() => markerElement._mousedownInProgress = false, 100); // –°–±—Ä–æ—Å —á–µ—Ä–µ–∑ 100ms

      // üî• –ü–ï–†–í–ê–Ø –ò –ì–õ–ê–í–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≥–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
      // –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: –≤–∏–¥–µ–æ-–æ–±–ª–∞—Å—Ç–∏ –º–æ–≥—É—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—Ç—å—Å—è –¥–∞–∂–µ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
      const markerData = this.viewerManager?.getHotspotData(hotspotId);
      const isVideoArea = markerData?.type === 'video-area';

      if (window._dragSystemBlocked && !isVideoArea) {
        console.log('üõë –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞ - –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ô –í–´–•–û–î');
        event.preventDefault();
        event.stopPropagation();
        return;
      }

      if (window._dragSystemBlocked && isVideoArea) {
        console.log('üé¨ –í–ò–î–ï–û-–û–ë–õ–ê–°–¢–¨: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ä–µ - —Ç–µ–ø–µ—Ä—å A-Frame –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º–∏
      if (markerElement._rightClickHandled || markerElement._doubleClickHandled) {
        console.log('üö´ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä: mousedown –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ä–µ');
        return;
      }

      // –†–ê–î–ò–ö–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º –ù–ò–ß–ï–ì–û –µ—Å–ª–∏ ViewerManager –æ–±–Ω–∞—Ä—É–∂–∏–ª –ø—Ä–∞–≤—ã–π –∫–ª–∏–∫
      const currentTime = Date.now();
      const lastRightClickTime = this.viewerManager ? this.viewerManager._lastRightClickTime : 0;
      const timeSinceRightClick = currentTime - (lastRightClickTime || 0);

      if (timeSinceRightClick < 200) { // –†–∞—Å—à–∏—Ä—è–µ–º –æ–∫–Ω–æ –¥–æ 200ms
        console.log('üö´ –ñ–ï–°–¢–ö–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê: –Ω–µ–¥–∞–≤–Ω–∏–π –ø—Ä–∞–≤—ã–π –∫–ª–∏–∫ (', timeSinceRightClick, 'ms –Ω–∞–∑–∞–¥) - –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ');
        event.preventDefault();
        event.stopPropagation();
        return;
      }

      // –ü–ï–†–í–ò–ß–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç ViewerManager (canvas —Å–æ–±—ã—Ç–∏—è)
      if (this.viewerManager && (
        this.viewerManager._blockDraggingForRightClick ||
        this.viewerManager._rightClickInProgress ||
        this.viewerManager._rightClickDetected ||
        this._rightClickDetected
      )) {
        console.log('üö´ –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ - –ø—Ä–∞–≤—ã–π –∫–ª–∏–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∏—Å—Ç–µ–º–æ–π');
        event.preventDefault();
        event.stopPropagation();
        return;
      }

      // –í–¢–û–†–ò–ß–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ - –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è A-Frame —Å–æ–±—ã—Ç–∏–π, –Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã
      const isRightClick = (event.button === 2) || (event.which === 3) || (event.buttons === 2);

      if (isRightClick) {
        console.log('üö´ CoordinateManager: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø—Ä–∞–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏ —á–µ—Ä–µ–∑ A-Frame - –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ');
        event.preventDefault();
        event.stopPropagation();
        return;
      }

      console.log('üñ±Ô∏è A-Frame mousedown –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞ (–ª–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞):', hotspotId);      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
      event.stopPropagation();
      event.preventDefault();

      // –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
      this.startDrag(event, markerElement, hotspotId);
    }, false); // –î–æ–±–∞–≤–ª—è–µ–º –ü–û–°–õ–ï –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (bubble phase)

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
    markerElement.addEventListener('mouseenter', () => {
      if (!this.isDragging) {
        markerElement.setAttribute('scale', '1.1 1.1 1.1');
      }
    });

    markerElement.addEventListener('mouseleave', () => {
      if (!this.isDragging) {
        markerElement.setAttribute('scale', '1 1 1');
      }
    });

    console.log('‚úÖ –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞:', hotspotId);
  }

  /**
   * –ù–∞—á–∏–Ω–∞–µ—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞
   */
  startDrag(event, markerElement, hotspotId) {
    console.log('üñ±Ô∏è –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞:', hotspotId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≤–∏–¥–µ–æ-–æ–±–ª–∞—Å—Ç–µ–π –ü–ï–†–ï–î –Ω–∞—á–∞–ª–æ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    if (markerElement._isVideoArea && this.viewerManager) {
      console.log('üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≤–∏–¥–µ–æ-–æ–±–ª–∞—Å—Ç–∏:', hotspotId);
      const hotspot = this.viewerManager.hotspotManager?.findHotspotById(hotspotId);
      if (hotspot) {
        const width = hotspot.videoWidth || 4;
        const height = hotspot.videoHeight || 3;
        console.log('üéØ –†–∞–∑–º–µ—Ä—ã –≤–∏–¥–µ–æ-–æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', { width, height });
        const isWithinBounds = this.viewerManager.isMouseOverVideoArea(event, markerElement, width, height);

        if (!isWithinBounds) {
          console.log('üö´ –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ - –∫—É—Ä—Å–æ—Ä –≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü –≤–∏–¥–µ–æ-–æ–±–ª–∞—Å—Ç–∏:', hotspotId);
          return;
        }
        console.log('‚úÖ –ö—É—Ä—Å–æ—Ä –≤ –≥—Ä–∞–Ω–∏—Ü–∞—Ö –≤–∏–¥–µ–æ-–æ–±–ª–∞—Å—Ç–∏ - —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ:', hotspotId);
      } else {
        console.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω hotspot –¥–ª—è –≤–∏–¥–µ–æ-–æ–±–ª–∞—Å—Ç–∏:', hotspotId);
      }
    } else if (markerElement._isVideoArea) {
      console.warn('‚ö†Ô∏è ViewerManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥—Ä–∞–Ω–∏—Ü –≤–∏–¥–µ–æ-–æ–±–ª–∞—Å—Ç–∏');
    } else {
      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ö–æ—Ç—Å–ø–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –æ–±–ª–∞—Å—Ç—å –º–∞—Ä–∫–µ—Ä–∞
      const hotspot = this.viewerManager?.hotspotManager?.findHotspotById(hotspotId);
      if (hotspot && this.viewerManager) {
        console.log('üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ö–æ—Ç—Å–ø–æ—Ç–∞:', hotspotId);
        const isWithinBounds = this.viewerManager.isMouseOverMarker(event, markerElement);

        if (!isWithinBounds) {
          console.log('üö´ –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ - –∫—É—Ä—Å–æ—Ä –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏ –º–∞—Ä–∫–µ—Ä–∞:', hotspotId);
          return;
        }
        console.log('‚úÖ –ö—É—Ä—Å–æ—Ä –≤ –æ–±–ª–∞—Å—Ç–∏ –º–∞—Ä–∫–µ—Ä–∞ - —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ:', hotspotId);
      }
    }

    // –£–õ–¨–¢–†–ê-–ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    const currentTime = Date.now();
    const lastRightClickTime = this.viewerManager ? this.viewerManager._lastRightClickTime : 0;
    const timeSinceRightClick = currentTime - (lastRightClickTime || 0);

    // –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    if (window._dragSystemBlocked) {
      console.log('üõë –ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê startDrag: –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è');
      return;
    }

    if (timeSinceRightClick < 300) { // –ï—â–µ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
      console.log('üõë –ê–í–ê–†–ò–ô–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê startDrag: –Ω–µ–¥–∞–≤–Ω–∏–π –ø—Ä–∞–≤—ã–π –∫–ª–∏–∫ (', timeSinceRightClick, 'ms –Ω–∞–∑–∞–¥)');
      return;
    }

    // –ü–û–°–õ–ï–î–ù–Ø–Ø –ü–†–û–í–ï–†–ö–ê –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    if (this.viewerManager && (
      this.viewerManager._blockDraggingForRightClick ||
      this.viewerManager._rightClickInProgress ||
      this.viewerManager._rightClickDetected ||
      this._rightClickDetected
    )) {
      console.log('üö´ startDrag –æ—Ç–º–µ–Ω–µ–Ω - –ø—Ä–∞–≤—ã–π –∫–ª–∏–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∏—Å—Ç–µ–º–æ–π');
      return;
    }

    event.preventDefault();
    event.stopPropagation();

    this.isDragging = true;
    this.draggedMarker = {
      element: markerElement,
      hotspotId: hotspotId
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–ª–∞–≥–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    markerElement._isDragging = true;
    markerElement._wasDragged = false;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    const position = markerElement.getAttribute('position');
    this.dragStartPosition = {
      x: position.x,
      y: position.y,
      z: position.z
    };

    // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    markerElement.setAttribute('scale', '1.2 1.2 1.2');
    markerElement.style.cursor = 'grabbing';

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –Ω–∞—á–∞–ª–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    markerElement.emit('drag-start', { hotspotId });
  }

  /**
   * –ù–∞—á–∏–Ω–∞–µ—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ-–æ–±–ª–∞—Å—Ç–∏ (—Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
   */
  startVideoAreaDragging(markerElement, videoPlane, hotspot, event) {
    console.log('üé¨ –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ-–æ–±–ª–∞—Å—Ç–∏:', hotspot?.id);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –≤–∏–¥–µ–æ-–æ–±–ª–∞—Å—Ç–∏
    if (this.viewerManager) {
      const width = hotspot?.videoWidth || 4;
      const height = hotspot?.videoHeight || 3;
      console.log('üéØ –†–∞–∑–º–µ—Ä—ã –≤–∏–¥–µ–æ-–æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', { width, height });
      const isWithinBounds = this.viewerManager.isMouseOverVideoArea(event, markerElement, width, height);

      if (!isWithinBounds) {
        console.log('üö´ –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ-–æ–±–ª–∞—Å—Ç–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ - –∫—É—Ä—Å–æ—Ä –≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü');
        return;
      }
      console.log('‚úÖ –ö—É—Ä—Å–æ—Ä –≤ –≥—Ä–∞–Ω–∏—Ü–∞—Ö –≤–∏–¥–µ–æ-–æ–±–ª–∞—Å—Ç–∏ - —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ');
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É startDrag
    this.startDrag(event, markerElement, hotspot?.id);
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
   */
  onDrag(event) {
    if (!this.isDragging || !this.draggedMarker) {
      return;
    }

    event.preventDefault();

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –Ω–∞—á–∞–ª–æ—Å—å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
    const markerElement = this.draggedMarker.element;
    markerElement._wasDragged = true;

    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –∏–∑ ray-casting
    const newPosition = this.getMousePositionOnSphere(event);
    if (newPosition) {
      this.updateMarkerPosition(newPosition);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –º—ã—à–∏ –Ω–∞ —Å—Ñ–µ—Ä–µ —á–µ—Ä–µ–∑ ray casting
   */
  getMousePositionOnSphere(event) {
    const camera = document.querySelector('[camera]');
    const scene = document.querySelector('a-scene');

    if (!camera || !scene) return null;

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º—ã—à–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ canvas
    const rect = scene.canvas.getBoundingClientRect();
    const x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
    const y = -((event.clientY - rect.top) / rect.height) * 2 + 1;

    // –°–æ–∑–¥–∞–µ–º –ª—É—á –æ—Ç –∫–∞–º–µ—Ä—ã
    const raycaster = new THREE.Raycaster();
    const mouse = new THREE.Vector2(x, y);

    raycaster.setFromCamera(mouse, camera.getObject3D('camera'));

    // –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –Ω–µ–≤–∏–¥–∏–º–æ–π —Å—Ñ–µ—Ä–æ–π
    const sphere = new THREE.Sphere(new THREE.Vector3(0, 0, 0), this.sphereRadius);
    const intersectionPoint = new THREE.Vector3();

    if (raycaster.ray.intersectSphere(sphere, intersectionPoint)) {
      return {
        x: intersectionPoint.x,
        y: intersectionPoint.y,
        z: intersectionPoint.z
      };
    }

    return null;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –º–∞—Ä–∫–µ—Ä–∞
   */
  updateMarkerPosition(newPosition) {
    if (!this.draggedMarker) return;

    const markerElement = this.draggedMarker.element;
    const hotspotId = this.draggedMarker.hotspotId;

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞
    markerElement.setAttribute('position', newPosition);

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const spherical = this.cartesianToSpherical(newPosition.x, newPosition.y, newPosition.z);

    console.log('üìç –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –º–∞—Ä–∫–µ—Ä–∞:', {
      cartesian: newPosition,
      spherical: {
        yaw: spherical.yaw * (180 / Math.PI), // –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
        pitch: spherical.pitch * (180 / Math.PI),
        radius: spherical.radius
      }
    });

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏
    markerElement.emit('position-changed', {
      hotspotId,
      position: newPosition,
      spherical: spherical
    });

    // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤ HotspotManager
    if (markerElement._onPositionUpdate) {
      markerElement._onPositionUpdate(newPosition);
    } else if (this.viewerManager && this.viewerManager.hotspotManager) {
      this.viewerManager.hotspotManager.updateHotspotPosition(hotspotId, newPosition);
    }
  }

  /**
   * –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
   */
  endDrag(event) {
    if (!this.isDragging || !this.draggedMarker) {
      return;
    }

    console.log('üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞:', this.draggedMarker.hotspotId);

    const markerElement = this.draggedMarker.element;
    const hotspotId = this.draggedMarker.hotspotId;

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    markerElement.setAttribute('scale', '1 1 1');
    markerElement.style.cursor = 'pointer';

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    const finalPosition = markerElement.getAttribute('position');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ hotspot manager
    this.saveMarkerPosition(hotspotId, finalPosition);

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    markerElement.emit('drag-end', {
      hotspotId,
      oldPosition: this.dragStartPosition,
      newPosition: finalPosition
    });

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    this.isDragging = false;
    this.draggedMarker = null;
    this.dragStartPosition = null;

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–ª–∞–≥ _isDragging
    // –§–ª–∞–≥ _wasDragged –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω ViewerManager –≤ click –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
    markerElement._isDragging = false;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –º–∞—Ä–∫–µ—Ä–∞ –≤ HotspotManager
   */
  saveMarkerPosition(hotspotId, position) {
    if (window.hotspotManager) {
      try {
        window.hotspotManager.updateHotspotPosition(hotspotId, position);
        console.log('üíæ –ü–æ–∑–∏—Ü–∏—è –º–∞—Ä–∫–µ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', hotspotId, position);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –º–∞—Ä–∫–µ—Ä–∞:', error);
      }
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –º–∞—Ä–∫–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
   */
  createDraggableMarker(hotspot, markerElement) {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –Ω–∞ —Å—Ñ–µ—Ä–µ
    const spherePosition = this.normalizeToSphere(
      hotspot.position.x || 0,
      hotspot.position.y || 0,
      hotspot.position.z || 5
    );

    markerElement.setAttribute('position', spherePosition);

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
    this.setupMarkerDragging(markerElement, hotspot.id);

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    markerElement.style.cursor = 'grab';

    // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    markerElement.setAttribute('data-hotspot-id', hotspot.id);
    markerElement.setAttribute('data-draggable', 'true');

    console.log('‚úÖ –°–æ–∑–¥–∞–Ω –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã–π –º–∞—Ä–∫–µ—Ä:', hotspot.id, spherePosition);

    return markerElement;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º—ã–µ –º–∞—Ä–∫–µ—Ä—ã
   */
  getDraggableMarkers() {
    return document.querySelectorAll('[data-draggable="true"]');
  }

  /**
   * –í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
   */
  setDragMode(enabled) {
    const markers = this.getDraggableMarkers();
    markers.forEach(marker => {
      if (enabled) {
        marker.style.cursor = 'grab';
        marker.setAttribute('data-drag-enabled', 'true');
      } else {
        marker.style.cursor = 'pointer';
        marker.setAttribute('data-drag-enabled', 'false');
      }
    });

    console.log(`üîÑ –†–µ–∂–∏–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è ${enabled ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'} –¥–ª—è ${markers.length} –º–∞—Ä–∫–µ—Ä–æ–≤`);
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ —Å–≤—è–∑–∏ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
   */
  cleanupMarker(hotspotId) {
    console.log('üßπ –û—á–∏—â–∞–µ–º CoordinateManager —Å–≤—è–∑–∏ –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞:', hotspotId);

    // –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ—Ç –º–∞—Ä–∫–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–µ–π—á–∞—Å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ—Ç—Å—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
    if (this.draggedMarker && this.draggedMarker.id === `marker-${hotspotId}`) {
      console.log('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ —É–¥–∞–ª—è–µ–º–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞');
      this.stopDrag();
    }

    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ä
    if (this.draggedMarker && this.draggedMarker.id === `marker-${hotspotId}`) {
      this.draggedMarker = null;
    }

    console.log('‚úÖ CoordinateManager —Å–≤—è–∑–∏ –æ—á–∏—â–µ–Ω—ã –¥–ª—è:', hotspotId);
  }
}
