export default class HotspotManager {
  constructor() {
    this.viewerManager = null; // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
    this.hotspots = [];
    this.sceneManager = null; // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
    // –†–µ–µ—Å—Ç—Ä –≤–∏–¥–µ–æ-URL –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞–º–∏/–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞–º–∏
    this._videoRegistryKey = 'color_tour_video_registry';
    this.videoRegistry = this.loadVideoRegistry();

    // –†–µ–µ—Å—Ç—Ä –ø–æ—Å—Ç–µ—Ä–æ–≤ (–æ–±–ª–æ–∂–µ–∫) –¥–ª—è –≤–∏–¥–µ–æ-–æ–±–ª–∞—Å—Ç–µ–π
    this._posterRegistryKey = 'color_tour_video_posters';
    this.posterRegistry = this.loadPosterRegistry();
  }

  setViewerManager(viewerManager) {
    this.viewerManager = viewerManager;
    // –ü–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ viewerManager –ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –±–æ–ª—å—à–∏–µ –≤–∏–¥–µ–æ
    try {
      if (this.hotspots && this.hotspots.some(h => h.hasVideo && !h.videoUrl)) {
        console.log('üîÑ setViewerManager: –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤–∏–¥–µ–æ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, –ø—ã—Ç–∞–µ–º—Å—è —á–µ—Ä–µ–∑ IndexedDB...');
        if (this._restoreVideosFromIndexedDB) {
          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã DOM —Å—Ü–µ–Ω—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è
          setTimeout(() => {
            try { this._restoreVideosFromIndexedDB(); } catch (e) { console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ (setViewerManager):', e); }
          }, 60);
        }
      } else if (this.hotspots && this.viewerManager && typeof this.viewerManager.createMissingVideoElement === 'function') {
        // –í–æ–∑–º–æ–∂–µ–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π –∫–æ–≥–¥–∞ videoUrl —É–∂–µ –ø–æ–¥–≥—Ä—É–∂–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞) –¥–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ viewerManager
        this.hotspots.filter(h => h.hasVideo && h.videoUrl).forEach(h => {
          try { this.viewerManager.createMissingVideoElement(h); } catch { }
        });
      }
    } catch (e) {
      console.warn('‚ö†Ô∏è setViewerManager post-restore –ª–æ–≥–∏–∫–∞ –¥–∞–ª–∞ —Å–±–æ–π:', e);
    }
  }

  setSceneManager(sceneManager) {
    this.sceneManager = sceneManager;
  }

  addHotspot(scene, hotspotData) {
    const id = `hotspot_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    console.log('üéØ –°–æ–∑–¥–∞–µ–º —Ö–æ—Ç—Å–ø–æ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏:', hotspotData);
    console.log('üéØ –ü–æ–∑–∏—Ü–∏—è –≤ hotspotData:', hotspotData.position);

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ö–æ—Ç—Å–ø–æ—Ç–∞
    let normalizedPosition;
    if (typeof hotspotData.position === 'string') {
      const coords = hotspotData.position.split(' ').map(c => parseFloat(c) || 0);
      normalizedPosition = { x: coords[0] || 0, y: coords[1] || 0, z: coords[2] || 0 };
    } else if (hotspotData.position && typeof hotspotData.position === 'object') {
      normalizedPosition = hotspotData.position;
    } else {
      normalizedPosition = { x: 0, y: 0, z: -5 };
    }

    const normalizeTitle = (t) => {
      try {
        if (!t || typeof t !== 'string') return t;
        // –£–¥–∞–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (–≤–∏–¥–µ–æ/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
        const lower = t.toLowerCase();
        const exts = ['.mp4', '.avi', '.mov', '.webm', '.mkv', '.flv', '.wmv', '.m4v', '.3gp', '.ogv', '.jpg', '.jpeg', '.png', '.gif', '.bmp', '.svg', '.webp', '.tiff', '.ico'];
        for (const ext of exts) { if (lower.endsWith(ext)) return t.slice(0, -ext.length).slice(0, 100); }
        return t.slice(0, 100);
      } catch { return t; }
    };

    const newHotspot = {
      id,
      sceneId: scene.id,
      ...hotspotData,
      title: hotspotData && hotspotData.title ? normalizeTitle(hotspotData.title) : hotspotData.title,
      position: normalizedPosition
    };
    console.log('üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ö–æ—Ç—Å–ø–æ—Ç:', newHotspot);
    console.log('üéØ –ü–æ–∑–∏—Ü–∏—è –≤ newHotspot:', newHotspot.position);

    this.hotspots.push(newHotspot);
    scene.hotspots.push(newHotspot); // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å—Ü–µ–Ω–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

    this.viewerManager.createVisualMarker(newHotspot);

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º videoUrl –≤ —Ä–µ–µ—Å—Ç—Ä–µ, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –∑–∞–¥–∞–Ω
    if (newHotspot.videoUrl && typeof newHotspot.videoUrl === 'string' && newHotspot.videoUrl.trim() !== '') {
      this.registerVideoUrl(newHotspot.id, newHotspot.videoUrl);
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    this.saveToStorage();

    console.log('–•–æ—Ç—Å–ø–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω:', newHotspot);
  }

  updateHotspot(hotspotId, data) {
    const hotspot = this.findHotspotById(hotspotId);
    if (!hotspot) return false;

    const normalized = { ...data };
    if (data && typeof data.title === 'string') {
      try {
        const t = data.title;
        const lower = t.toLowerCase();
        const exts = ['.mp4', '.avi', '.mov', '.webm', '.mkv', '.flv', '.wmv', '.m4v', '.3gp', '.ogv', '.jpg', '.jpeg', '.png', '.gif', '.bmp', '.svg', '.webp', '.tiff', '.ico'];
        for (const ext of exts) { if (lower.endsWith(ext)) { normalized.title = t.slice(0, -ext.length).slice(0, 100); break; } }
        if (!normalized.title) normalized.title = t.slice(0, 100);
      } catch { /* ignore */ }
    }
    Object.assign(hotspot, normalized);
    this.viewerManager.updateVisualMarker(hotspot);

    // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–∏–ª—Å—è videoUrl ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º –µ–≥–æ –≤ —Ä–µ–µ—Å—Ç—Ä–µ –¥–ª—è –±—É–¥—É—â–µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    if (data && typeof data.videoUrl === 'string' && data.videoUrl.trim() !== '') {
      this.registerVideoUrl(hotspotId, data.videoUrl);
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    this.saveToStorage();

    console.log('–•–æ—Ç—Å–ø–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω:', hotspot);
    return true;
  }

  updateHotspotPosition(hotspotId, position) {
    const hotspot = this.findHotspotById(hotspotId);
    if (!hotspot) {
      console.warn('–•–æ—Ç—Å–ø–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏:', hotspotId);
      return;
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    let normalizedPosition;
    if (position && typeof position === 'object') {
      if (position.x !== undefined && position.y !== undefined && position.z !== undefined) {
        // A-Frame –ø–æ–∑–∏—Ü–∏—è –æ–±—ä–µ–∫—Ç - –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        normalizedPosition = {
          x: parseFloat(position.x) || 0,
          y: parseFloat(position.y) || 0,
          z: parseFloat(position.z) || 0
        };
      } else {
        // –£–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
        normalizedPosition = position;
      }
    } else if (typeof position === 'string') {
      // –°—Ç—Ä–æ–∫–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è "x y z"
      const coords = position.split(' ').map(c => parseFloat(c) || 0);
      normalizedPosition = { x: coords[0] || 0, y: coords[1] || 0, z: coords[2] || 0 };
    } else {
      console.warn('üíæ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–∑–∏—Ü–∏–∏:', position);
      normalizedPosition = { x: 0, y: 0, z: -5 };
    }

    hotspot.position = normalizedPosition;
    console.log('üíæ –ü–æ–∑–∏—Ü–∏—è —Ö–æ—Ç—Å–ø–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', hotspotId, normalizedPosition);
    console.log('üíæ –¢–∏–ø –ø–æ–∑–∏—Ü–∏–∏:', typeof normalizedPosition, '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä:', normalizedPosition?.constructor?.name);
    console.log('üíæ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–∑–∏—Ü–∏–∏:', JSON.stringify(normalizedPosition));

    // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –≤ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å—Ü–µ–Ω–µ
    if (this.sceneManager) {
      const scene = this.sceneManager.getSceneById(hotspot.sceneId);
      if (scene) {
        const sceneHotspot = scene.hotspots.find(h => h.id === hotspotId);
        if (sceneHotspot) {
          sceneHotspot.position = normalizedPosition;
        }
      }
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    this.saveToStorage();
  }

  removeHotspotById(hotspotId) {
    const index = this.hotspots.findIndex(h => h.id === hotspotId);
    if (index === -1) return;

    const hotspot = this.hotspots[index];

    // –£–¥–∞–ª—è–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Ö–æ—Ç—Å–ø–æ—Ç–æ–≤
    this.hotspots.splice(index, 1);

    // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å—Ü–µ–Ω—ã
    if (this.sceneManager) {
      const scene = this.sceneManager.getSceneById(hotspot.sceneId);
      if (scene && scene.hotspots) {
        const sceneIndex = scene.hotspots.findIndex(h => h.id === hotspotId);
        if (sceneIndex !== -1) {
          scene.hotspots.splice(sceneIndex, 1);
        }
      }
    }

    // –£–¥–∞–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä
    if (this.viewerManager) {
      this.viewerManager.removeVisualMarker(hotspotId);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    this.saveToStorage();

    console.log('–•–æ—Ç—Å–ø–æ—Ç —É–¥–∞–ª–µ–Ω:', hotspotId);
  }

  editHotspot(hotspotId) {
    const hotspot = this.findHotspotById(hotspotId);
    if (!hotspot) {
      console.warn('–•–æ—Ç—Å–ø–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', hotspotId);
      return;
    }

    // –í—ã–∑—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞
    if (window.editMarker) {
      window.editMarker(hotspotId);
    } else {
      console.warn('–§—É–Ω–∫—Ü–∏—è editMarker –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
  }

  removeHotspotByMarkerId(markerId) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ö–æ—Ç—Å–ø–æ—Ç–∞ –∏–∑ ID –º–∞—Ä–∫–µ—Ä–∞
    const hotspotId = markerId.replace('marker-', '');
    this.removeHotspotById(hotspotId);
  }

  findHotspotById(id) {
    const hotspot = this.hotspots.find(h => h.id === id);
    if (hotspot && hotspot._needsVideoRestore && !hotspot.videoUrl) {
      // –õ–æ–≥–∏—Ä—É–µ–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è video URL
      console.log(`üîÑ –•–æ—Ç—Å–ø–æ—Ç ${id} —Ç—Ä–µ–±—É–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è videoUrl`);
      if (typeof hotspot._needsVideoRestore === 'string') {
        console.log(`üìÅ –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–∞–π–ª: ${hotspot._needsVideoRestore}`);
      }
    }
    return hotspot;
  }

  findHotspotByMarkerId(markerId) {
    const hotspotId = markerId.replace('marker-', '');
    return this.findHotspotById(hotspotId);
  }

  getHotspotsForScene(sceneId) {
    console.log('üîç getHotspotsForScene –≤—ã–∑–≤–∞–Ω –¥–ª—è —Å—Ü–µ–Ω—ã:', sceneId);
    console.log('üîç –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã:', this.hotspots);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ –¥–ª—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    this.loadFromStorage();

    // –í–ê–ñ–ù–û: —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ö–æ—Ç—Å–ø–æ—Ç—ã —Å—Ç—Ä–æ–≥–æ –ø–æ sceneId
    const sceneHotspots = this.hotspots.filter(h => h.sceneId === sceneId);
    console.log('üîç –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è —Å—Ü–µ–Ω—ã', sceneId, ':', sceneHotspots.length);

    if (sceneHotspots.length === 0) {
      console.log('üìã –ú–∞—Ä–∫–µ—Ä—ã –¥—Ä—É–≥–∏—Ö —Å—Ü–µ–Ω:', this.hotspots.filter(h => h.sceneId !== sceneId));
    }

    return sceneHotspots;
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Ö–æ—Ç—Å–ø–æ—Ç—ã, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å—Ü–µ–Ω–∞–º
   */
  cleanupOrphanedHotspots(validSceneIds) {
    console.log('üßπ –û—á–∏—â–∞–µ–º —Ö–æ—Ç—Å–ø–æ—Ç—ã-—Å–∏—Ä–æ—Ç—ã...');
    console.log('‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ ID —Å—Ü–µ–Ω:', validSceneIds);

    const before = this.hotspots.length;
    const orphanedHotspots = this.hotspots.filter(h => !validSceneIds.includes(h.sceneId));

    if (orphanedHotspots.length > 0) {
      console.log('üóëÔ∏è –ù–∞–π–¥–µ–Ω—ã —Ö–æ—Ç—Å–ø–æ—Ç—ã-—Å–∏—Ä–æ—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', orphanedHotspots.length);
      orphanedHotspots.forEach(hotspot => {
        console.log(`  üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ö–æ—Ç—Å–ø–æ—Ç "${hotspot.title}" (sceneId: ${hotspot.sceneId})`);
      });

      this.hotspots = this.hotspots.filter(h => validSceneIds.includes(h.sceneId));
      this.saveToStorage();

      console.log(`‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –±—ã–ª–æ ${before}, —Å—Ç–∞–ª–æ ${this.hotspots.length}`);
      return orphanedHotspots.length;
    }

    console.log('‚úÖ –•–æ—Ç—Å–ø–æ—Ç—ã-—Å–∏—Ä–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return 0;
  }

  getHotspots() {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ö–æ—Ç—Å–ø–æ—Ç—ã
    return this.hotspots || [];
  }

  loadHotspots(hotspotsData) {
    this.hotspots = hotspotsData || [];
    console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ö–æ—Ç—Å–ø–æ—Ç–æ–≤:', this.hotspots.length);

    // –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞: —Å—Ä–∞–∑—É –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏ –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∏–¥–µ–æ-URL –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª–µ–π (file/src/videoData)
    try {
      let needIndexedRestore = false;
      (this.hotspots || []).forEach((h) => {
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è, —Ü–≤–µ—Ç–∞, —Ä–∞–∑–º–µ—Ä—ã –∏ —Ç.–ø.
        try { this.restoreHotspotData(h); } catch (e) { console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ restoreHotspotData –≤ loadHotspots:', e); }

        // –ï—Å–ª–∏ –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –≤—Å—ë –µ—â—ë –Ω–µ—Ç ‚Äî –ø–æ–º–µ—á–∞–µ–º –¥–ª—è IndexedDB
        if (h && h.hasVideo && !h.videoUrl) {
          needIndexedRestore = true;
        }
      });

      // –ï—Å–ª–∏ –µ—Å—Ç—å –º–∞—Ä–∫–µ—Ä—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ IndexedDB ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º
      if (needIndexedRestore && this._restoreVideosFromIndexedDB) {
        setTimeout(() => {
          try { this._restoreVideosFromIndexedDB(); } catch (e) { console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ –∏–∑ IndexedDB (loadHotspots):', e); }
        }, 80);
      }
    } catch (e) {
      console.warn('‚ö†Ô∏è –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ö–æ—Ç—Å–ø–æ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π:', e);
    }
  }

  getAllHotspots() {
    return this.hotspots;
  }

  updateAllMarkersWithSettings(settings) {
    this.hotspots.forEach(hotspot => {
      if (!hotspot.size) {
        hotspot.size = hotspot.type === 'hotspot' ? settings.hotspotSize : settings.infopointSize;
      }
      if (!hotspot.color) { // –ï—Å–ª–∏ —É —Ö–æ—Ç—Å–ø–æ—Ç–∞ –Ω–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
        hotspot.color = hotspot.type === 'hotspot' ? settings.hotspotColor : settings.infopointColor;
        if (this.viewerManager) {
          this.viewerManager.updateVisualMarker(hotspot);
        }
      }
    });
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ö–æ—Ç—Å–ø–æ—Ç—ã –≤ localStorage
   */
  saveToStorage() {
    try {
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–æ—Ç—Å–ø–æ—Ç—ã:', this.hotspots.length);

      // –†–ê–î–ò–ö–ê–õ–¨–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const hotspotsToSave = this.hotspots.map(hotspot => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
        const minimizedHotspot = {
          id: hotspot.id,
          sceneId: hotspot.sceneId,
          type: hotspot.type,
          position: hotspot.position
        };

        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–≤–µ—Ç —Ö–æ—Ç—Å–ø–æ—Ç–∞
        if (hotspot.color && hotspot.color !== 'undefined') {
          minimizedHotspot.color = hotspot.color;
        }

        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∫–æ–Ω–∫—É —Ö–æ—Ç—Å–ø–æ—Ç–∞
        if (hotspot.icon && hotspot.icon !== 'undefined') {
          minimizedHotspot.icon = hotspot.icon;
        }

        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∏–∫–æ–Ω–∫–∏ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∏–∫–æ–Ω–æ–∫
        if (hotspot.icon === 'custom' && hotspot.customIconData) {
          minimizedHotspot.customIconData = hotspot.customIconData;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if (hotspot.size && hotspot.size !== 0.3) {
          minimizedHotspot.size = hotspot.size;
        }
        if (hotspot.targetSceneId) {
          minimizedHotspot.targetSceneId = hotspot.targetSceneId;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
        if (hotspot.width && hotspot.width !== 2) {
          minimizedHotspot.width = hotspot.width;
        }
        if (hotspot.height && hotspot.height !== 1.5) {
          minimizedHotspot.height = hotspot.height;
        }

        // –í–∏–¥–µ–æ —Ä–∞–∑–º–µ—Ä—ã (–¥–ª—è video-area –∏ animated-object)
        if (hotspot.videoWidth) minimizedHotspot.videoWidth = hotspot.videoWidth;
        if (hotspot.videoHeight) minimizedHotspot.videoHeight = hotspot.videoHeight;

        // –î–ª—è iframe-3d —Å–æ—Ö—Ä–∞–Ω—è–µ–º iframeUrl (–æ–Ω –Ω–µ–±–æ–ª—å—à–æ–π) –∏ —Ä–∞–∑–º–µ—Ä—ã
        if (hotspot.type === 'iframe-3d') {
          if (hotspot.iframeUrl) minimizedHotspot.iframeUrl = hotspot.iframeUrl;
        }

        // –•—Ä–æ–º–∞–∫–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è animated-object
        if (hotspot.type === 'animated-object') {
          if (hotspot.chromaEnabled) minimizedHotspot.chromaEnabled = !!hotspot.chromaEnabled;
          if (hotspot.chromaColor) minimizedHotspot.chromaColor = hotspot.chromaColor;
          if (hotspot.chromaSimilarity !== undefined) minimizedHotspot.chromaSimilarity = hotspot.chromaSimilarity;
          if (hotspot.chromaSmoothness !== undefined) minimizedHotspot.chromaSmoothness = hotspot.chromaSmoothness;
          if (hotspot.chromaThreshold !== undefined) minimizedHotspot.chromaThreshold = hotspot.chromaThreshold;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º rotation —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω—É–ª–µ–≤–æ–π
        if (hotspot.rotation && (hotspot.rotation !== "0 0 0" && hotspot.rotation !== 0)) {
          minimizedHotspot.rotation = hotspot.rotation;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º title —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –Ω–µ –ø—É—Å—Ç–æ–π
        if (hotspot.title && hotspot.title.trim()) {
          minimizedHotspot.title = hotspot.title.substring(0, 50); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        }

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º _originalData —Å –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –±–æ–ª—å—à–∏–º–∏ –ø–æ–ª—è–º–∏
        const excludedFields = ['videoUrl', 'videoData', 'thumbnail', 'poster', 'src', 'href', 'data', 'content', 'blob', 'customIconData'];
        const originalData = {};
        let hasOriginalData = false;

        excludedFields.forEach(field => {
          if (hotspot.hasOwnProperty(field) && hotspot[field]) {
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è videoUrl —Å –æ–≥—Ä–æ–º–Ω—ã–º–∏ base64 (data:video/)
            if (field === 'videoUrl') {
              const val = String(hotspot[field]);
              const isDataUrl = val.startsWith('data:video');
              // –ï—Å–ª–∏ —ç—Ç–æ –±–æ–ª—å—à–æ–π dataURL (> 50KB), –ù–ï –∫–ª–∞–¥–µ–º –µ–≥–æ –≤ _originalData (–ø–æ–ª–∞–≥–∞—Ç—å—Å—è –Ω–∞ —Ä–µ–µ—Å—Ç—Ä)
              if (isDataUrl && val.length > 50 * 1024) {
                // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞/—Ö—ç—à –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                if (!minimizedHotspot.videoFileName) {
                  try {
                    const parts = val.substring(0, 120).split('/');
                    minimizedHotspot.videoFileName = parts[parts.length - 1].slice(0, 40) + '...';
                  } catch { }
                }
                minimizedHotspot.hasVideo = true;
                console.log('‚ö° –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ base64 videoUrl –≤ _originalData (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–µ—Å—Ç—Ä + IndexedDB)');
                // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ IndexedDB
                this._saveLargeVideoToIndexedDB && this._saveLargeVideoToIndexedDB(hotspot.id, val);
                return; // skip
              }
            }
            // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è videoData (–∫–æ–≥–¥–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è —á–∏—Å—Ç–æ–µ base64 –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –∏–ª–∏ —Å –Ω–∏–º)
            if (field === 'videoData') {
              const val = String(hotspot[field]);
              const isLarge = val.length > 50 * 1024; // ~50KB
              if (isLarge) {
                // –§–æ—Ä–º–∏—Ä—É–µ–º dataURL –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ IndexedDB –≤–º–µ—Å—Ç–æ localStorage
                let dataUrl = val.startsWith('data:video') ? val : `data:video/mp4;base64,${val}`;
                minimizedHotspot.hasVideo = true;
                if (!minimizedHotspot.videoFileName) {
                  try { minimizedHotspot.videoFileName = (dataUrl.substring(0, 60) + '...'); } catch { }
                }
                console.log('‚ö° –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ videoData –≤ _originalData (–ø–µ—Ä–µ–Ω–æ—Å –≤ IndexedDB)');
                this._saveLargeVideoToIndexedDB && this._saveLargeVideoToIndexedDB(hotspot.id, dataUrl);
                return; // skip storing huge raw videoData
              }
            }
            originalData[field] = hotspot[field];
            hasOriginalData = true;
            console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ _originalData: ${field} (—Ä–∞–∑–º–µ—Ä: ${JSON.stringify(hotspot[field]).length} —Å–∏–º–≤–æ–ª–æ–≤)`);
          }
        });

        // –ï—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ _originalData
        if (hasOriginalData) {
          minimizedHotspot._originalData = originalData;
        }

        // –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ª–∏—á–∏–∏ videoUrl –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        if (hotspot.videoUrl && hotspot.videoUrl.trim() !== '') {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã URL –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
          const urlParts = hotspot.videoUrl.split('/');
          const fileName = urlParts[urlParts.length - 1];
          if (fileName.length < 100) { // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
            minimizedHotspot.videoFileName = fileName;
          }
          minimizedHotspot.hasVideo = true;
        }

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        const originalSize = JSON.stringify(hotspot).length;
        const optimizedSize = JSON.stringify(minimizedHotspot).length;
        const reduction = ((originalSize - optimizedSize) / originalSize * 100).toFixed(1);

        console.log(`üíæ –ú–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö–æ—Ç—Å–ø–æ—Ç: ${hotspot.id}`);
        console.log(`   –†–∞–∑–º–µ—Ä –¥–æ: ${originalSize} —Å–∏–º–≤–æ–ª–æ–≤`);
        console.log(`   –†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏: ${optimizedSize} —Å–∏–º–≤–æ–ª–æ–≤`);
        console.log(`   –û–±—â–µ–µ —Å–∂–∞—Ç–∏–µ: ${reduction}%`);

        return minimizedHotspot;
      });

      const dataToSave = JSON.stringify(hotspotsToSave);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
      const sizeKB = (dataToSave.length / 1024).toFixed(2);
      console.log(`üíæ –†–∞–∑–º–µ—Ä –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${sizeKB} KB (–±—ã–ª–æ: 5653+ KB)`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–º–µ—Ä –ø—Ä–∏–µ–º–ª–µ–º—ã–π (–º–µ–Ω–µ–µ 2MB)
      if (dataToSave.length > 2 * 1024 * 1024) {
        console.warn('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è...');
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Ö–æ—Ç—Å–ø–æ—Ç–æ–≤
        const recentHotspots = hotspotsToSave.slice(-30);
        const reducedData = JSON.stringify(recentHotspots);
        console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Ö–æ—Ç—Å–ø–æ—Ç–æ–≤: ${(reducedData.length / 1024).toFixed(2)} KB`);
        localStorage.setItem('color_tour_hotspots', reducedData);
      } else {
        localStorage.setItem('color_tour_hotspots', dataToSave);
      }

      console.log('üíæ –•–æ—Ç—Å–ø–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)');
    } catch (error) {
      if (error.name === 'QuotaExceededError') {
        console.error('‚ùå localStorage –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω! –ü—ã—Ç–∞–µ–º—Å—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é...');
        this.handleQuotaExceeded();
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–æ—Ç—Å–ø–æ—Ç–æ–≤:', error);
      }
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–µ—Å—Ç—Ä –≤–∏–¥–µ–æ-URL –∏–∑ localStorage
   */
  loadVideoRegistry() {
    try {
      const raw = localStorage.getItem(this._videoRegistryKey);
      const parsed = raw ? JSON.parse(raw) : {};
      return parsed && typeof parsed === 'object' ? parsed : {};
    } catch (e) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–µ—Å—Ç—Ä –≤–∏–¥–µ–æ-URL, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π:', e);
      return {};
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–µ—Å—Ç—Ä –ø–æ—Å—Ç–µ—Ä–æ–≤ –∏–∑ localStorage
   */
  loadPosterRegistry() {
    try {
      const raw = localStorage.getItem(this._posterRegistryKey);
      const parsed = raw ? JSON.parse(raw) : {};
      return parsed && typeof parsed === 'object' ? parsed : {};
    } catch (e) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–µ—Å—Ç—Ä –ø–æ—Å—Ç–µ—Ä–æ–≤, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π:', e);
      return {};
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–µ—Å—Ç—Ä –≤–∏–¥–µ–æ-URL –≤ localStorage
   */
  saveVideoRegistry() {
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å
      localStorage.setItem(this._videoRegistryKey, JSON.stringify(this.videoRegistry || {}));
    } catch (e) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–µ—Å—Ç—Ä –≤–∏–¥–µ–æ-URL:', e);
      // Fallback: —Å–æ–∑–¥–∞–µ–º —É—Ä–µ–∑–∞–Ω–Ω—É—é –∫–æ–ø–∏—é –±–µ–∑ –æ–≥—Ä–æ–º–Ω—ã—Ö data:URL
      try {
        const slim = {};
        const src = this.videoRegistry || {};
        for (const id in src) {
          const entry = src[id] || {};
          const url = String(entry.url || '');
          const isHugeData = url.startsWith('data:video') && url.length > 50 * 1024;
          if (isHugeData) {
            slim[id] = { url: null, fileName: entry.fileName, storedIn: 'indexeddb', ts: Date.now() };
          } else {
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É URL –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            slim[id] = { ...entry };
            if (slim[id].url && String(slim[id].url).length > 5000) {
              slim[id].url = null;
              slim[id].storedIn = 'indexeddb';
            }
          }
        }
        localStorage.setItem(this._videoRegistryKey, JSON.stringify(slim));
        this.videoRegistry = slim;
        console.log('‚úÖ –†–µ–µ—Å—Ç—Ä –≤–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —É—Ä–µ–∑–∞–Ω–Ω–æ–º –≤–∏–¥–µ');
      } catch (e2) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–∂–µ —É—Ä–µ–∑–∞–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä –≤–∏–¥–µ–æ:', e2);
      }
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–µ—Å—Ç—Ä –ø–æ—Å—Ç–µ—Ä–æ–≤ –≤ localStorage
   */
  savePosterRegistry() {
    try {
      localStorage.setItem(this._posterRegistryKey, JSON.stringify(this.posterRegistry || {}));
    } catch (e) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–µ—Å—Ç—Ä –ø–æ—Å—Ç–µ—Ä–æ–≤:', e);
    }
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç videoUrl –¥–ª—è —Ö–æ—Ç—Å–ø–æ—Ç–∞ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ —Ñ–ª–∞–≥–∏
   */
  registerVideoUrl(hotspotId, videoUrl) {
    if (!hotspotId || !videoUrl) return;

    const fileName = (() => {
      try {
        const parts = String(videoUrl).split('/');
        return parts[parts.length - 1] || String(videoUrl);
      } catch {
        return String(videoUrl);
      }
    })();

    // –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–≥—Ä–æ–º–Ω—ã–µ data:URL –≤ localStorage ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ–º–µ—Ç–∫–∞, —á—Ç–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ IndexedDB
    const isHugeData = String(videoUrl).startsWith('data:video') && String(videoUrl).length > 50 * 1024;
    if (isHugeData) {
      this.videoRegistry[hotspotId] = { url: null, fileName, storedIn: 'indexeddb', ts: Date.now() };
    } else {
      this.videoRegistry[hotspotId] = { url: videoUrl, fileName, ts: Date.now() };
    }
    this.saveVideoRegistry();

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤ –ø–∞–º—è—Ç–∏ —Ö–æ—Ç—Å–ø–æ—Ç
    const hotspot = this.findHotspotById(hotspotId);
    if (hotspot) {
      hotspot.videoUrl = videoUrl;
      hotspot.hasVideo = true;
      hotspot.videoFileName = fileName;
      if (hotspot._needsVideoRestore) delete hotspot._needsVideoRestore;
    }
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±–ª–æ–∂–∫—É (poster) –∫–∞–∫ data URL –∏–ª–∏ –≤–Ω–µ—à–Ω–∏–π URL
   */
  registerPoster(hotspotId, posterUrl) {
    if (!hotspotId || !posterUrl) return;
    this.posterRegistry[hotspotId] = { url: posterUrl, ts: Date.now() };
    this.savePosterRegistry();

    const hotspot = this.findHotspotById(hotspotId);
    if (hotspot) {
      hotspot.poster = posterUrl;
    }
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–ª–æ–∂–∫—É (poster) –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
   */
  getPoster(hotspotId) {
    const entry = this.posterRegistry ? this.posterRegistry[hotspotId] : null;
    return entry && entry.url ? entry.url : null;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç videoUrl –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ö–æ—Ç—Å–ø–æ—Ç–∞
   */
  getVideoUrlFromRegistry(hotspotId) {
    const entry = this.videoRegistry ? this.videoRegistry[hotspotId] : null;
    if (!entry) return null;
    if (entry.storedIn === 'indexeddb' || !entry.url) return null; // –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ IndexedDB
    return entry.url;
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ localStorage
   */
  handleQuotaExceeded() {
    try {
      const now = Date.now();
      if (this._lastQuotaRecoveryTime && (now - this._lastQuotaRecoveryTime) < 5000) {
        console.warn('‚è±Ô∏è handleQuotaExceeded: –ø—Ä–æ–ø—É—Å–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (—á–∞—Å—Ç—ã–µ –≤—ã–∑–æ–≤—ã)');
        return;
      }
      this._lastQuotaRecoveryTime = now;

      console.log('‚ö†Ô∏è localStorage –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é...');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–µ—Å—Ç—Ä—ã –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
      let videoRegistryBackup = null;
      let posterRegistryBackup = null;
      try { videoRegistryBackup = JSON.stringify(this.videoRegistry || {}); } catch { }
      try { posterRegistryBackup = JSON.stringify(this.posterRegistry || {}); } catch { }

      // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–∏, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä, –∞ –Ω–µ –≤–µ—Å—å localStorage (–º—è–≥–∫–∞—è –æ—á–∏—Å—Ç–∫–∞)
      try { localStorage.removeItem('color_tour_hotspots'); } catch { }

      // –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã –º–æ–≥—É—Ç –±—Ä–æ—Å–∏—Ç—å —Å—Ä–∞–∑—É) ‚Äî fallback —Ç–æ—Ç–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
      try { localStorage.setItem('__quota_test__', '1'); localStorage.removeItem('__quota_test__'); }
      catch {
        console.log('‚ö†Ô∏è –ú—è–≥–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ –ø–æ–º–æ–≥–ª–∞ ‚Äî –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É');
        localStorage.clear();
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Ö–æ—Ç—Å–ø–æ—Ç–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
      const recentHotspots = this.hotspots.slice(-20).map(h => ({
        id: h.id,
        sceneId: h.sceneId,
        type: h.type || 'video-area',
        position: h.position,
        width: h.width || 2,
        height: h.height || 1.5,
        color: h.color,
        size: h.size,
        icon: h.icon,
        title: h.title,
        targetSceneId: h.targetSceneId,
        textColor: h.textColor,
        textSize: h.textSize,
        videoFileName: h.videoFileName,
        hasVideo: !!h.hasVideo
      }));

      const emergencyData = JSON.stringify(recentHotspots);
      console.log(`üÜò –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${recentHotspots.length} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ö–æ—Ç—Å–ø–æ—Ç–æ–≤ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç): ${(emergencyData.length / 1024).toFixed(2)} KB`);
      localStorage.setItem('color_tour_hotspots', emergencyData);

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–µ—Å—Ç—Ä—ã (–µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ)
      try { if (videoRegistryBackup && videoRegistryBackup.length < 200 * 1024) localStorage.setItem(this._videoRegistryKey, videoRegistryBackup); } catch { }
      try { if (posterRegistryBackup && posterRegistryBackup.length < 200 * 1024) localStorage.setItem(this._posterRegistryKey, posterRegistryBackup); } catch { }

      console.log('üíæ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)');
    } catch (retryError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', retryError);
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ö–æ—Ç—Å–ø–æ—Ç—ã –∏–∑ localStorage
   */
  loadFromStorage() {
    try {
      const stored = localStorage.getItem('color_tour_hotspots');
      if (stored) {
        this.hotspots = JSON.parse(stored);
        console.log('üì• –•–æ—Ç—Å–ø–æ—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage:', this.hotspots.length);

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –∏–∑ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ö–æ—Ç—Å–ø–æ—Ç–æ–≤
        this.hotspots.forEach((hotspot, index) => {
          console.log(`üì• –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ö–æ—Ç—Å–ø–æ—Ç ${index + 1}: ${hotspot.id}`);
          console.log(`   –ü–æ–∑–∏—Ü–∏—è: ${JSON.stringify(hotspot.position)}`);

          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –∏–∑ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
          this.restoreHotspotData(hotspot);
        });

        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ–ª—å—à–∏–µ –≤–∏–¥–µ–æ –∏–∑ IndexedDB (–µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –≤—ã–Ω–µ—Å–µ–Ω—ã)
        try {
          if (this.hotspots.some(h => h.hasVideo && !h.videoUrl)) {
            console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ö–æ—Ç—Å–ø–æ—Ç—ã —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º videoUrl ‚Äî –ø–ª–∞–Ω–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ IndexedDB...');
            if (this._restoreVideosFromIndexedDB) {
              setTimeout(() => {
                try { this._restoreVideosFromIndexedDB(); } catch (e) { console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ –∏–∑ IndexedDB:', e); }
              }, 80);
            }
          }
        } catch (e) {
          console.warn('‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ IndexedDB –Ω–µ —É–¥–∞–ª–æ—Å—å:', e);
        }

        return true;
      }
      return false;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ö–æ—Ç—Å–ø–æ—Ç–æ–≤:', error);
      return false;
    }
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—è —Ö–æ—Ç—Å–ø–æ—Ç–∞
   */
  restoreHotspotData(hotspot) {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!hotspot.width) hotspot.width = 2;
    if (!hotspot.height) hotspot.height = 1.5;
    if (!hotspot.rotation) hotspot.rotation = "0 0 0";
    if (!hotspot.type) hotspot.type = "video-area";

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤–∏–¥–µ–æ –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    if (hotspot.type === 'video-area') {
      if (!hotspot.videoWidth) hotspot.videoWidth = 4;
      if (!hotspot.videoHeight) hotspot.videoHeight = 3;
    } else if (hotspot.type === 'animated-object') {
      if (!hotspot.videoWidth) hotspot.videoWidth = 2;
      if (!hotspot.videoHeight) hotspot.videoHeight = (2 * 9 / 16);
      // –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ö—Ä–æ–º–∞–∫–µ—è
      if (hotspot.chromaEnabled === undefined) hotspot.chromaEnabled = false;
      if (!hotspot.chromaColor) hotspot.chromaColor = '#00ff00';
      if (hotspot.chromaSimilarity === undefined) hotspot.chromaSimilarity = 0.4;
      if (hotspot.chromaSmoothness === undefined) hotspot.chromaSmoothness = 0.1;
      if (hotspot.chromaThreshold === undefined) hotspot.chromaThreshold = 0.0;
    }

    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    const originalColor = hotspot.color;
    console.log('üîç –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ö–æ—Ç—Å–ø–æ—Ç–∞:', hotspot.id, '–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç:', originalColor);

    // –ò–°–ü–†–ê–í–õ–Ø–ï–ú: –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ—Ç
    const defaultSettings = this.getDefaultSettings();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π —Ü–≤–µ—Ç (–≤–∫–ª—é—á–∞—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞)
    const hasValidColor = originalColor &&
      originalColor !== 'undefined' &&
      originalColor !== '' &&
      originalColor !== null;

    if (!hasValidColor) {
      if (hotspot.type === 'hotspot') {
        hotspot.color = defaultSettings?.hotspotColor || '#ff0000';
      } else if (hotspot.type === 'info-point') {
        hotspot.color = defaultSettings?.infopointColor || '#0066cc';
      } else {
        hotspot.color = '#ffcc00'; // –¶–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤
      }
      console.log('üé® –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ö–æ—Ç—Å–ø–æ—Ç–∞:', hotspot.id, hotspot.type, '->', hotspot.color);
    } else {
      // –í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç
      hotspot.color = originalColor;
      console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç —Ö–æ—Ç—Å–ø–æ—Ç–∞:', hotspot.id, hotspot.type, '->', hotspot.color);
    }

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    if (!hotspot.textColor) hotspot.textColor = '#ffffff';
    if (!hotspot.textSize) hotspot.textSize = '1';
    if (!hotspot.textFamily) hotspot.textFamily = 'Arial, sans-serif';
    if (hotspot.textBold === undefined) hotspot.textBold = false;
    if (hotspot.textUnderline === undefined) hotspot.textUnderline = false;

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
    if (hotspot.icon === undefined || hotspot.icon === null) {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
      if (hotspot.type === 'hotspot') {
        hotspot.icon = 'arrow';
      } else if (hotspot.type === 'info-point') {
        hotspot.icon = 'sphere';
      } else if (hotspot.type === 'video-area' || hotspot.type === 'animated-object') {
        hotspot.icon = 'cube';
      } else {
        hotspot.icon = 'sphere'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
      }
      console.log('üñºÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∫–æ–Ω–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ö–æ—Ç—Å–ø–æ—Ç–∞:', hotspot.id, hotspot.type, '->', hotspot.icon);
    } else {
      console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∏–∫–æ–Ω–∫–∞ —Ö–æ—Ç—Å–ø–æ—Ç–∞:', hotspot.id, hotspot.icon);
    }

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∏–∫–æ–Ω–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ –∫–∞—Å—Ç–æ–º–Ω–∞—è –∏–∫–æ–Ω–∫–∞
    if (hotspot.icon === 'custom' && hotspot.customIconData) {
      console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ö–æ—Ç—Å–ø–æ—Ç–∞:', hotspot.id);
    }

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º videoUrl –∏–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª–µ–π (file/src/videoData), –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    try {
      if (!hotspot.videoUrl) {
        let candidate = null;

        const normalizeDataVideo = (str) => {
          if (!str || typeof str !== 'string') return null;
          const v = str.trim();
          if (v.startsWith('data:video/')) return v;
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º—ã: "mp4;base64,...." –∏–ª–∏ "webm;base64,..."
          const m = v.match(/^(mp4|webm|ogg);base64,(.+)$/i);
          if (m) return `data:video/${m[1].toLowerCase()};base64,${m[2]}`;
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º "base64,...." –≤ mp4 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          const m2 = v.match(/^base64,(.+)$/i);
          if (m2) return `data:video/mp4;base64,${m2[1]}`;
          return null;
        };

        // 1) –ü–æ–ª–µ file (—á–∞—Å—Ç–æ –ø–æ–ø–∞–¥–∞–µ—Ç –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –ø—Ä–æ–µ–∫—Ç–∞) ‚Äî –º–æ–∂–µ—Ç –±—ã—Ç—å: "data:video/...", "mp4;base64,...", "webm;base64,...", –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ "base64,..."
        if (!candidate && typeof hotspot.file === 'string' && hotspot.file.trim().length > 0) {
          candidate = normalizeDataVideo(hotspot.file);
        }

        // 2) –ü–æ–ª–µ src ‚Äî –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Ç–∞–º –ª–µ–∂–∏—Ç dataURL –≤–∏–¥–µ–æ
        if (!candidate && typeof hotspot.src === 'string') {
          const v = normalizeDataVideo(hotspot.src);
          if (v) candidate = v;
        }

        // 3) –ü–æ–ª–µ videoData (—á–∏—Å—Ç–æ–µ base64) ‚Äî –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ dataURL
        if (!candidate && typeof hotspot.videoData === 'string' && hotspot.videoData.trim().length > 0) {
          candidate = normalizeDataVideo(hotspot.videoData);
        }

        if (candidate && candidate.startsWith('data:video')) {
          hotspot.videoUrl = candidate;
          hotspot.hasVideo = true;
          try { this.registerVideoUrl(hotspot.id, candidate); } catch { }
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ–ª—å—à–æ–π dataURL –≤ IndexedDB –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏
          try { this._saveLargeVideoToIndexedDB && this._saveLargeVideoToIndexedDB(hotspot.id, candidate); } catch { }
          // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –±—ã–ª
          if (hotspot._needsVideoRestore) delete hotspot._needsVideoRestore;
          // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç, –µ—Å–ª–∏ viewerManager —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω
          try {
            if (this.viewerManager && typeof this.viewerManager.createMissingVideoElement === 'function') {
              this.viewerManager.createMissingVideoElement(hotspot);
            }
          } catch { /* ignore */ }
        }
      }
    } catch (e) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ videoUrl –∏–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª–µ–π:', e);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å videoUrl (–ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –∏–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª–µ–π)
    if (hotspot.hasVideo && !hotspot.videoUrl) {
      if (hotspot.videoFileName) {
        // –ü–æ–º–µ—á–∞–µ–º –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–µ
        hotspot._needsVideoRestore = hotspot.videoFileName;
        console.log(`‚ö†Ô∏è videoUrl –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è —Ö–æ—Ç—Å–ø–æ—Ç–∞ ${hotspot.id} - —Ñ–∞–π–ª: ${hotspot.videoFileName}`);
      } else {
        hotspot._needsVideoRestore = true;
        console.log(`‚ö†Ô∏è videoUrl –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è —Ö–æ—Ç—Å–ø–æ—Ç–∞ ${hotspot.id} - –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞`);
      }
    }

    // –ï–î–ò–ù–û–û–ë–†–ê–ó–ò–ï –ù–ê–ó–í–ê–ù–ò–ô: —É–¥–∞–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ title
    try {
      if (hotspot.title && typeof hotspot.title === 'string') {
        const t = hotspot.title;
        const lower = t.toLowerCase();
        const exts = ['.mp4', '.avi', '.mov', '.webm', '.mkv', '.flv', '.wmv', '.m4v', '.3gp', '.ogv', '.jpg', '.jpeg', '.png', '.gif', '.bmp', '.svg', '.webp', '.tiff', '.ico'];
        for (const ext of exts) {
          if (lower.endsWith(ext)) {
            hotspot.title = t.slice(0, -ext.length).slice(0, 100);
            break;
          }
        }
        if (hotspot.title === t) {
          hotspot.title = t.slice(0, 100);
        }
      }
    } catch { /* ignore */ }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (fallback –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)
   */
  getDefaultSettings() {
    if (window.viewerManager && typeof window.viewerManager.getDefaultSettings === 'function') {
      return window.viewerManager.getDefaultSettings();
    }

    // Fallback –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    return {
      hotspotColor: '#ff0000',
      infopointColor: '#0066cc',
      hotspotSize: 0.3,
      infopointSize: 0.25
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ö–æ—Ç—Å–ø–æ—Ç —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
   */
  getHotspotWithFullData(hotspotId) {
    const hotspot = this.findHotspotById(hotspotId);
    if (!hotspot) return null;

    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ö–æ—Ç—Å–ø–æ—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const fullHotspot = { ...hotspot };

    // –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
    if (!fullHotspot.videoUrl) {
      const regUrl = this.getVideoUrlFromRegistry(hotspotId);
      if (regUrl) {
        fullHotspot.videoUrl = regUrl;
        fullHotspot.hasVideo = true;
        const parts = String(regUrl).split('/');
        fullHotspot.videoFileName = parts[parts.length - 1] || undefined;
        if (fullHotspot._needsVideoRestore) delete fullHotspot._needsVideoRestore;
        console.log(`‚úÖ videoUrl –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ –¥–ª—è ${hotspotId}`);
        return fullHotspot;
      }
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º videoUrl –∏–∑ _originalData –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ñ–ª–∞–≥–∞
    if (fullHotspot._needsVideoRestore && !fullHotspot.videoUrl) {
      console.log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ videoUrl –¥–ª—è —Ö–æ—Ç—Å–ø–æ—Ç–∞ ${hotspotId}`);

      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
      const savedHotspots = JSON.parse(localStorage.getItem('color_tour_hotspots') || '[]');
      const originalHotspot = savedHotspots.find(h => h.id === hotspotId);

      if (originalHotspot && originalHotspot._originalData) {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º videoUrl –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (originalHotspot._originalData.videoUrl) {
          fullHotspot.videoUrl = originalHotspot._originalData.videoUrl;
          console.log(`‚úÖ videoUrl –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ _originalData –¥–ª—è ${hotspotId}`);
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–µ—Å—Ç—Ä –Ω–∞ –±—É–¥—É—â–µ–µ
          this.registerVideoUrl(hotspotId, fullHotspot.videoUrl);
        }
        // –ï—Å–ª–∏ –Ω–µ—Ç videoUrl, –Ω–æ –µ—Å—Ç—å videoData ‚Äî —Ñ–æ—Ä–º–∏—Ä—É–µ–º data URL
        else if (originalHotspot._originalData.videoData) {
          const raw = originalHotspot._originalData.videoData;
          const dataUrl = raw.startsWith('data:video') ? raw : `data:video/mp4;base64,${raw}`;
          fullHotspot.videoUrl = dataUrl;
          fullHotspot.hasVideo = true;
          console.log(`‚úÖ videoUrl —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω –∏–∑ videoData –¥–ª—è ${hotspotId}`);
          this.registerVideoUrl(hotspotId, fullHotspot.videoUrl);
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–æ–ª—è
        if (originalHotspot._originalData.videoData && !fullHotspot.videoData) {
          fullHotspot.videoData = originalHotspot._originalData.videoData;
          console.log(`‚úÖ videoData –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ _originalData –¥–ª—è ${hotspotId}`);
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∏–∫–æ–Ω–∫–∏
        if (originalHotspot._originalData.customIconData && !fullHotspot.customIconData) {
          fullHotspot.customIconData = originalHotspot._originalData.customIconData;
          console.log(`‚úÖ customIconData –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ _originalData –¥–ª—è ${hotspotId}`);
        }
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ _originalData –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è ${hotspotId}`);

        if (typeof fullHotspot._needsVideoRestore === 'string') {
          const fileName = fullHotspot._needsVideoRestore;
          console.log(`üìÅ –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–∞–π–ª: ${fileName} - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ`);
        }
      }

      // –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
      delete fullHotspot._needsVideoRestore;
    }

    return fullHotspot;
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
   */
  promptForVideoRestore(hotspot, expectedFileName) {
    console.log(`üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è ${hotspot.id}`);
    console.log(`üìÅ –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–∞–π–ª: ${expectedFileName}`);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.editHotspot(hotspot.id);
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ö–æ—Ç—Å–ø–æ—Ç—ã
   */
  clearAll() {
    this.hotspots = [];
    localStorage.removeItem('color_tour_hotspots');
    if (this.viewerManager) {
      this.viewerManager.clearMarkers();
    }
    console.log('–í—Å–µ —Ö–æ—Ç—Å–ø–æ—Ç—ã –æ—á–∏—â–µ–Ω—ã');
  }

  // ===== IndexedDB –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ–ª—å—à–∏—Ö –≤–∏–¥–µ–æ =====
  _openVideoDB() {
    if (this._videoDBPromise) return this._videoDBPromise;
    if (!this._videoSavedOnce) this._videoSavedOnce = new Set();
    this._videoDBPromise = new Promise((resolve, reject) => {
      if (!('indexedDB' in window)) return reject(new Error('IndexedDB not supported'));
      const req = indexedDB.open('color_tour_videos', 1);
      req.onupgradeneeded = () => {
        const db = req.result;
        if (!db.objectStoreNames.contains('videos')) db.createObjectStore('videos', { keyPath: 'id' });
      };
      req.onsuccess = () => resolve(req.result);
      req.onerror = () => reject(req.error || new Error('open error'));
    });
    return this._videoDBPromise;
  }

  async _saveLargeVideoToIndexedDB(hotspotId, dataUrl) {
    try {
      // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –≤–∏–¥–µ–æ –∑–∞ —Å–µ—Å—Å–∏—é
      if (!this._videoSavedOnce) this._videoSavedOnce = new Set();
      if (this._videoSavedOnce.has(hotspotId)) return;
      this._videoSavedOnce.add(hotspotId);
      const db = await this._openVideoDB();
      const tx = db.transaction('videos', 'readwrite');
      tx.objectStore('videos').put({ id: hotspotId, data: dataUrl });
      tx.oncomplete = () => console.log('üíæ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ IndexedDB –¥–ª—è', hotspotId);
      tx.onerror = () => console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ –≤ IndexedDB:', tx.error);
    } catch (e) {
      console.warn('‚ö†Ô∏è IndexedDB save fail:', e);
    }
  }

  async _restoreVideosFromIndexedDB() {
    const pending = (this.hotspots || []).filter(h => h.hasVideo && !h.videoUrl);
    if (!pending.length) return;
    let db; try { db = await this._openVideoDB(); } catch { return; }
    const tx = db.transaction('videos', 'readonly');
    const store = tx.objectStore('videos');
    await Promise.all(pending.map(h => new Promise(res => {
      const rq = store.get(h.id);
      rq.onsuccess = () => {
        const r = rq.result;
        if (r && r.data) {
          h.videoUrl = r.data;
          h.hasVideo = true;
          if (h._needsVideoRestore) delete h._needsVideoRestore;
          console.log('‚úÖ videoUrl –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ IndexedDB –¥–ª—è', h.id);
          // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
          this.registerVideoUrl && this.registerVideoUrl(h.id, h.videoUrl);
          if (this.viewerManager) {
            if (typeof this.viewerManager.createMissingVideoElement === 'function') {
              try { this.viewerManager.createMissingVideoElement(h); } catch { }
            }
          }
        } else {
          console.warn('‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ IndexedDB –¥–ª—è', h.id);
        }
        res();
      };
      rq.onerror = () => { console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è IndexedDB –¥–ª—è', h.id); res(); };
    })));
  }

  /**
   * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ localStorage (–≤—ã–∑—ã–≤–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞)
   */
  static checkStorageSize() {
    let total = 0;
    const results = {};

    for (let key in localStorage) {
      if (localStorage.hasOwnProperty(key)) {
        const size = localStorage[key].length;
        total += size;
        results[key] = `${(size / 1024).toFixed(2)} KB`;
      }
    }

    console.log('üìä –ê–Ω–∞–ª–∏–∑ localStorage:');
    console.log(`üìè –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${(total / 1024).toFixed(2)} KB`);
    console.log('üìã –ü–æ –∫–ª—é—á–∞–º:', results);

    // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ª–∏–º–∏—Ç–∞ (–æ–±—ã—á–Ω–æ 5-10 MB)
    const estimatedLimit = 5 * 1024 * 1024; // 5 MB –≤ –±–∞–π—Ç–∞—Ö
    const usage = (total / estimatedLimit * 100).toFixed(2);
    console.log(`‚ö° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø—Ä–∏–º–µ—Ä–Ω–æ: ${usage}% –æ—Ç –ª–∏–º–∏—Ç–∞`);

    return { total, results, usage };
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
window.checkStorageSize = HotspotManager.checkStorageSize;
