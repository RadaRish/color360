// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞–º–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π A-Frame
export default class SceneManager {
  constructor(viewerManager) {
    this.viewerManager = viewerManager;
    this.scenes = [];
    this.currentScene = null;
    this.hotspotManager = null; // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
  }

  setHotspotManager(hotspotManager) {
    this.hotspotManager = hotspotManager;
  }

  async addScene(scene) {
    try {
      // –ó–ê–©–ò–¢–ê: –±–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã–µ —Å—Ü–µ–Ω—ã –±–µ–∑ src
      if (scene.name && scene.name.match(/^\d+\.(JPG|jpg)$/) && !scene.src) {
        console.warn('üö´ –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å—Ü–µ–Ω—ã:', scene.name);
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —Å—Ü–µ–Ω—ã –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è  
      if (!scene.id) {
        scene.id = 'scene_' + Date.now() + '_' + Math.floor(Math.random() * 1000);
      }
      if (!scene.hotspots) {
        scene.hotspots = [];
      }

      this.scenes.push(scene);

      // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ü–µ–Ω–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë –∫–∞–∫ —Ç–µ–∫—É—â—É—é
      if (!this.currentScene) {
        await this.switchToScene(scene.id);
      }

      console.log('–°—Ü–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:', scene.name);
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ü–µ–Ω—ã:', error);
      // –£–¥–∞–ª—è–µ–º —Å—Ü–µ–Ω—É –∏–∑ –º–∞—Å—Å–∏–≤–∞ –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
      const index = this.scenes.indexOf(scene);
      if (index !== -1) {
        this.scenes.splice(index, 1);
      }
      return false;
    }
  }

  removeScene(sceneId) {
    console.log('üóëÔ∏è –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å—Ü–µ–Ω—É:', sceneId);

    const index = this.scenes.findIndex(s => s.id === sceneId);
    if (index === -1) {
      console.error('‚ùå –°—Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', sceneId);
      return Promise.resolve(false);
    }

    const scene = this.scenes[index];
    console.log('üóëÔ∏è –ù–∞–π–¥–µ–Ω–∞ —Å—Ü–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', scene.name);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å —Å—Ü–µ–Ω—É (–¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞)
    if (this.scenes.length <= 1) {
      console.error('‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ü–µ–Ω—É');
      alert('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ü–µ–Ω—É. –í —Ç—É—Ä–µ –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å—Ü–µ–Ω–∞.');
      return Promise.resolve(false);
    }

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ö–æ—Ç—Å–ø–æ—Ç—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–æ–π —Å—Ü–µ–Ω–æ–π
    if (window.hotspotManager) {
      const hotspotsToDelete = window.hotspotManager.getHotspotsForScene(sceneId);
      console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º', hotspotsToDelete.length, '—Ö–æ—Ç—Å–ø–æ—Ç–æ–≤ –¥–ª—è —Å—Ü–µ–Ω—ã:', scene.name);
      hotspotsToDelete.forEach(hotspot => {
        window.hotspotManager.deleteHotspot(hotspot.id);
      });
    }

    // –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ü–µ–Ω—É, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥—Ä—É–≥—É—é
    if (this.currentScene && this.currentScene.id === sceneId) {
      const remainingScenes = this.scenes.filter(s => s.id !== sceneId);
      if (remainingScenes.length > 0) {
        console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ü–µ–Ω—É –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º');
        this.switchToScene(remainingScenes[0].id);
      } else {
        this.currentScene = null;
        this.viewerManager.clearMarkers();
      }
    }

    // –£–¥–∞–ª—è–µ–º —Å—Ü–µ–Ω—É –∏–∑ –º–∞—Å—Å–∏–≤–∞
    this.scenes.splice(index, 1);
    console.log('‚úÖ –°—Ü–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞:', scene.name);
    console.log('üìä –û—Å—Ç–∞–ª–æ—Å—å —Å—Ü–µ–Ω:', this.scenes.length);

    return Promise.resolve(true);
  }

  getSceneById(sceneId) {
    return this.scenes.find(s => s.id === sceneId);
  }

  getAllScenes() {
    return [...this.scenes];
  }

  /**
   * –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç —Å—Ü–µ–Ω—É
   */
  renameScene(sceneId, newName) {
    const scene = this.getSceneById(sceneId);
    if (scene) {
      scene.name = newName;
      console.log(`üìù –°—Ü–µ–Ω–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞: ${sceneId} -> "${newName}"`);
      return true;
    }
    console.error(`‚ùå –°—Ü–µ–Ω–∞ —Å ID ${sceneId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è`);
    return false;
  }

  getCurrentScene() {
    return this.currentScene;
  }

  clearScenes() {
    this.scenes = [];
    this.currentScene = null;
    this.viewerManager.clearMarkers();
  }

  async switchToScene(sceneId) {
    console.log('üîÑ switchToScene –≤—ã–∑–≤–∞–Ω –¥–ª—è —Å—Ü–µ–Ω—ã:', sceneId);
    console.trace('üìç –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ switchToScene');

    // –ó–ê–©–ò–¢–ê –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    const now = Date.now();
    if (this._lastSwitchTime && this._lastSwitchTarget === sceneId && (now - this._lastSwitchTime) < 200) { // –£–º–µ–Ω—å—à–∞–µ–º –≤—Ä–µ–º—è –∑–∞—â–∏—Ç—ã –¥–æ 200ms
      console.log('üõ°Ô∏è –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∑–æ–≤ switchToScene –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω - –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–∑–æ–≤', (now - this._lastSwitchTime), 'ms –Ω–∞–∑–∞–¥');
      return true;
    }
    this._lastSwitchTime = now;
    this._lastSwitchTarget = sceneId;

    const scene = this.getSceneById(sceneId);
    if (!scene) {
      console.error('–°—Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', sceneId);
      return false;
    }

    if (scene === this.currentScene) {
      console.log('‚ÑπÔ∏è –£–∂–µ –Ω–∞ —ç—Ç–æ–π —Å—Ü–µ–Ω–µ:', sceneId);
      return true; // –£–∂–µ –Ω–∞ —ç—Ç–æ–π —Å—Ü–µ–Ω–µ
    }

    try {
      // –û—á–∏—â–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã
      this.viewerManager.clearMarkers();

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—É—é –ø–∞–Ω–æ—Ä–∞–º—É
      const success = await this.viewerManager.setPanorama(scene.src);
      if (!success) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞–Ω–æ—Ä–∞–º—É –¥–ª—è —Å—Ü–µ–Ω—ã:', scene.name);
        return false;
      }

      this.currentScene = scene;

      // –í–ê–ñ–ù–û: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
      setTimeout(() => {
        this._lastSwitchTime = null;
        this._lastSwitchTarget = null;
        console.log('üîì –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å–±—Ä–æ—à–µ–Ω–∞');
      }, 1000); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –Ω–æ–≤–æ–π —Å—Ü–µ–Ω—ã
      if (this.hotspotManager) {
        const sceneHotspots = this.hotspotManager.getHotspotsForScene(sceneId);
        console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è —Å—Ü–µ–Ω—ã:', sceneId, '–Ω–∞–π–¥–µ–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤:', sceneHotspots.length);
        console.log('üîç –ú–∞—Ä–∫–µ—Ä—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', sceneHotspots.map(h => ({ id: h.id, title: h.title, sceneId: h.sceneId, color: h.color, type: h.type, icon: h.icon })));

        sceneHotspots.forEach(hotspot => {
          console.log('üéØ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä:', hotspot.id, '–¥–ª—è —Å—Ü–µ–Ω—ã:', hotspot.sceneId, '—Å —Ü–≤–µ—Ç–æ–º:', hotspot.color, '—Ç–∏–ø:', hotspot.type, '–∏–∫–æ–Ω–∫–∞:', hotspot.icon);

          // –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –º–∞—Ä–∫–µ—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
          this.hotspotManager.restoreHotspotData(hotspot);

          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (videoUrl –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ –∏ —Ç.–ø.)
          if (window.hotspotManager && typeof window.hotspotManager.getHotspotWithFullData === 'function') {
            const full = window.hotspotManager.getHotspotWithFullData(hotspot.id);
            if (full) Object.assign(hotspot, full);
          }

          // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è –≤–∏–¥–µ–æ-–æ–±–ª–∞—Å—Ç–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ-—ç–ª–µ–º–µ–Ω—Ç—ã
          if (hotspot.type === 'video-area' && hotspot.videoUrl) {
            console.log('üé¨ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤–∏–¥–µ–æ-–æ–±–ª–∞—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–µ–æ-—ç–ª–µ–º–µ–Ω—Ç:', hotspot.id);

            const videoId = `video-${hotspot.id}`;
            let videoEl = document.getElementById(videoId);

            if (!videoEl) {
              console.log('üîß –í–∏–¥–µ–æ-—ç–ª–µ–º–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ –¥–ª—è:', hotspot.id);
              this.viewerManager.createMissingVideoElement(hotspot);
            } else if (videoEl.src !== hotspot.videoUrl) {
              console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º src –≤–∏–¥–µ–æ-—ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è:', hotspot.id, '–Ω–æ–≤—ã–π URL:', hotspot.videoUrl);
              videoEl.src = hotspot.videoUrl;
              videoEl.load();
            } else {
              console.log('‚úÖ –í–∏–¥–µ–æ-—ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –¥–ª—è:', hotspot.id);
            }
          }

          this.viewerManager.createVisualMarker(hotspot);
        });

        console.log('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', sceneHotspots.length, '–º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è —Å—Ü–µ–Ω—ã:', sceneId);
        // –ü–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤ –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ –ø–æ–¥—Ç—è–Ω—É—Ç—å –±–æ–ª—å—à–∏–µ –≤–∏–¥–µ–æ –∏–∑ IndexedDB
        try {
          if (window.hotspotManager && typeof window.hotspotManager._restoreVideosFromIndexedDB === 'function') {
            const needRestore = sceneHotspots.some(h => h.type === 'video-area' && h.hasVideo && !h.videoUrl);
            if (needRestore) {
              console.log('üîÑ post-switchToScene: –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤–∏–¥–µ–æ –±–µ–∑ URL ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ IndexedDB');
              setTimeout(() => {
                try { window.hotspotManager._restoreVideosFromIndexedDB(); } catch (e) { console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ post-switch –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ:', e); }
              }, 120);
            }
          }
        } catch (e) {
          console.warn('‚ö†Ô∏è post-switch –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å:', e);
        }
      } else {
        console.warn('‚ö†Ô∏è hotspotManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω - –º–∞—Ä–∫–µ—Ä—ã –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥ –∫–∞–º–µ—Ä—ã –¥–ª—è —Å—Ü–µ–Ω—ã, –µ—Å–ª–∏ –æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω
      if (scene.cameraPosition) {
        console.log('üìπ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã –¥–ª—è —Å—Ü–µ–Ω—ã:', sceneId, scene.cameraPosition);
        const applyCam = () => this.viewerManager.setCameraPosition(scene.cameraPosition);
        // –ü–µ—Ä–≤–∏—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
        applyCam();
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ—Å–ª–µ –∫–∞–¥—Ä–∞ —Ä–µ–Ω–¥–µ—Ä–∞
        requestAnimationFrame(() => {
          applyCam();
          // –ò –µ—â—ë –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–æ—Ä–æ—Ç–∫–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
          setTimeout(() => {
            applyCam();
            const got = this.viewerManager.getCameraPosition();
            if (got) {
              const near = (a, b) => Math.abs((a || 0) - (b || 0)) < 0.01;
              if (!near(got.position.x, scene.cameraPosition.position.x) || !near(got.position.y, scene.cameraPosition.position.y) || !near(got.position.z, scene.cameraPosition.position.z)) {
                console.warn('‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è –∫–∞–º–µ—Ä—ã –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π', { want: scene.cameraPosition, got });
              }
            }
          }, 50);
        });
      }

      console.log('–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ —Å—Ü–µ–Ω—É:', scene.name);
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å—Ü–µ–Ω—ã:', error);
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞—â–∏—Ç—É –∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      this._lastSwitchTime = null;
      this._lastSwitchTarget = null;
      return false;
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å UI
  switchScene(sceneId) {
    return this.switchToScene(sceneId);
  }

  updateScene(sceneId, updates) {
    const scene = this.getSceneById(sceneId);
    if (scene) {
      Object.assign(scene, updates);
      return true;
    }
    return false;
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  getSceneIndex(sceneId) {
    return this.scenes.findIndex(s => s.id === sceneId);
  }

  moveScene(fromIndex, toIndex) {
    if (fromIndex >= 0 && fromIndex < this.scenes.length &&
      toIndex >= 0 && toIndex < this.scenes.length) {
      const [movedScene] = this.scenes.splice(fromIndex, 1);
      this.scenes.splice(toIndex, 0, movedScene);
      return true;
    }
    return false;
  }

  /**
   * –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ—Ç —Å—Ü–µ–Ω—ã –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º (–¥–ª—è DnD –∏–∑ UI)
   */
  reorderScenes(fromIndex, toIndex) {
    const ok = this.moveScene(fromIndex, toIndex);
    if (ok) {
      console.log(`üîÄ –ü–æ—Ä—è–¥–æ–∫ —Å—Ü–µ–Ω –∏–∑–º–µ–Ω–µ–Ω: ${fromIndex} -> ${toIndex}`);
      return true;
    }
    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —Å—Ü–µ–Ω', { fromIndex, toIndex });
    return false;
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ü–µ–Ω—ã
   */
  clearCameraForScene(sceneId) {
    console.log('üóëÔ∏è clearCameraForScene –≤—ã–∑–≤–∞–Ω –¥–ª—è —Å—Ü–µ–Ω—ã:', sceneId);

    const scene = this.getSceneById(sceneId);
    if (!scene) {
      console.error('‚ùå –°—Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–∞–º–µ—Ä—ã:', sceneId);
      return false;
    }

    if (scene.cameraPosition) {
      delete scene.cameraPosition;
      console.log('‚úÖ –ü–æ–∑–∏—Ü–∏—è –∫–∞–º–µ—Ä—ã –æ—á–∏—â–µ–Ω–∞ –¥–ª—è —Å—Ü–µ–Ω—ã:', sceneId, scene.name);
      return true;
    } else {
      console.log('‚ÑπÔ∏è –£ —Å—Ü–µ–Ω—ã', sceneId, '–Ω–µ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–º–µ—Ä—ã');
      return false;
    }
  }

  // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  exportScenes() {
    return this.scenes.map(scene => ({
      id: scene.id,
      name: scene.name,
      src: scene.src
    }));
  }

  // –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
  async importScenes(scenesData) {
    this.clearScenes();

    for (const sceneData of scenesData) {
      await this.addScene({
        id: sceneData.id,
        name: sceneData.name,
        src: sceneData.src,
        hotspots: []
      });
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ü–µ–Ω—É –µ—Å–ª–∏ –µ—Å—Ç—å
    if (this.scenes.length > 0) {
      await this.switchToScene(this.scenes[0].id);
    }
  }
}